<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://thanhdancer.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thanhdancer.com/" rel="alternate" type="text/html" /><updated>2025-08-31T17:25:58+00:00</updated><id>https://thanhdancer.com/feed.xml</id><title type="html">Dancing on the keyboard</title><subtitle>Nhiều khi chỉ muốn tìm nơi trút ra, mà không muốn phiền ai cả.</subtitle><entry><title type="html">Scrum Reserve Timebox</title><link href="https://thanhdancer.com/management/2025/08/31/scrum-reserved-space.html" rel="alternate" type="text/html" title="Scrum Reserve Timebox" /><published>2025-08-31T00:00:00+00:00</published><updated>2025-08-31T00:00:00+00:00</updated><id>https://thanhdancer.com/management/2025/08/31/scrum-reserved-space</id><content type="html" xml:base="https://thanhdancer.com/management/2025/08/31/scrum-reserved-space.html"><![CDATA[<p>Khi tiếp cận với mô hình Agile, đặc biệt là Scrum, điều khiến mình tâm đắc nhất chính là backlog được quản lý trong timebox. Cách làm này bảo vệ đội ngũ khỏi tình trạng bị phân tâm, nhận thêm việc ngoài kế hoạch, dẫn đến quá tải, chất lượng giảm sút, phải làm thêm giờ và dễ rơi vào kiệt sức.</p>

<p>Một Sprint kéo dài 2 tuần thường được coi là hợp lý: đủ ngắn để điều chỉnh chiến lược khi cần thiết, đủ dài để hoàn thiện một phase hoặc một tính năng, tạo ra một output vừa vặn khi kết thúc. Tuy nhiên, trên thực tế quản lý, luôn có những công việc chen ngang xuất hiện - thường là nhiệm vụ khẩn cấp, không thể chờ đến cuối Sprint. Nếu bỏ qua, dự án có thể đánh mất cơ hội hoặc đi sai hướng. Nếu đưa ngay vào Sprint đang chạy, thì vừa vi phạm nguyên tắc cam kết, vừa khiến team khó thực hiện trọn vẹn cả backlog cũ lẫn mới. Đây là một tình huống tiến thoái lưỡng nan mà mình từng nhiều lần gặp phải.</p>

<h2 id="ý-chính-tóm-gọn">Ý chính tóm gọn</h2>
<ul>
  <li>Không thể tránh hoàn toàn việc chen ngang trong Sprint -&gt; cần cơ chế để xử lý.</li>
  <li>Reserve Space = 20% effort dành cho công việc đột xuất, khẩn cấp.</li>
  <li>Low Prioriry backlog có thể “lấp chỗ trống” nhưng sẵn sàng bị thay thế.</li>
  <li>Nếu Reserve Space luôn bị vượt quá -&gt; phải xem lại kế hoạch dự án và kỳ vọng của các Stakeholders.</li>
  <li>Kết hợp kỷ luật của Scrum với linh hoạt thực tế -&gt; giúp team vừa ổn định, vừa thích ứng.</li>
</ul>

<h2 id="phân-tích-vấn-đề">Phân tích vấn đề</h2>
<p>Như đã nêu ở phần mở đầu, các vấn đề có thể kể đến trong trường hợp này gồm:</p>
<ul>
  <li>Nếu bỏ qua: có nguy cơ bỏ lỡ cơ hội quan trọng, dự án đi chệch mục tiêu.</li>
  <li>Nếu nhồi thêm vào Sprint: team bị quá tải, backlog cam kết từ đầu khó hoàn thành, chất lượng tổng thể giảm.</li>
</ul>

<p>Kinh nghiệm thực tế cho thấy, việc này không thể giải quyết bằng cách áp dụng lý thuyết một cách cứng nhắc, mà cần có một cơ chế linh hoạt để hấp thụ các biến động.</p>

<h2 id="giải-pháp-reserve-space-trong-sprint">Giải pháp: Reserve Space trong Sprint</h2>
<p>Mình đã thử áp dụng một ý tưởng gọi là Reserve Space - tức dành trước một phần dung lượng Sprint để xử lý các công việc khẩn cấp. Cách làm như sau:</p>

<ol>
  <li>Khi lập kế hoạch Sprint:
    <ul>
      <li>Chỉ commit backlog chính (Normal Backlog) ở mức khoảng 80% effort tổng Sprint.</li>
      <li>20% effort còn lại dành cho Reserve Space.</li>
    </ul>
  </li>
  <li>Cách sử dụng Reserve Space:
    <ul>
      <li>Nếu có công việc khẩn cấp (Critical Backlog), chúng sẽ được đưa vào phần Reserve Space.</li>
      <li>Các backlog ưu tiên thấp (Low Priority Backlog) có thể được xếp tạm trong Reserve Space để team thực hiện nếu không có việc chen ngang, nhưng sẵn sàng bị loại bỏ nếu cần nhường chỗ cho backlog quan trọng hơn.</li>
    </ul>
  </li>
  <li>Khi Reserve Space bị vượt quá:
    <ul>
      <li>Nếu Sprint nào cũng xuất hiện quá nhiều backlog khẩn cấp vượt ngoài Reserve Space, đó là tín hiệu cần xem xét lại dự án: có thể team đang hứa hẹn quá mức hoặc kỳ vọng từ stakeholders chưa thực tế.</li>
    </ul>
  </li>
</ol>

<h2 id="bài-học-rút-ra">Bài học rút ra</h2>
<p>Scrum mang lại sự kỷ luật trong cam kết, nhưng thực tế quản lý dự án luôn có biến số. Thay vì máy moc bỏ qua hoặc nhồi nhét backlog chen ngang, việc chủ động thiết kế một khoảng dung lượng dự phòng trong Sprint giúp đội ngũ vừa giữ được sự ổn định, vừa linh hoạt khi tình huống bất ngờ xảy đến.</p>]]></content><author><name></name></author><category term="management" /><category term="project-management" /><category term="scrum" /><category term="agile" /><category term="timebox" /><category term="backlog" /><category term="sprint" /><summary type="html"><![CDATA[Khi tiếp cận với mô hình Agile, đặc biệt là Scrum, điều khiến mình tâm đắc nhất chính là backlog được quản lý trong timebox. Cách làm này bảo vệ đội ngũ khỏi tình trạng bị phân tâm, nhận thêm việc ngoài kế hoạch, dẫn đến quá tải, chất lượng giảm sút, phải làm thêm giờ và dễ rơi vào kiệt sức.]]></summary></entry><entry><title type="html">Cẩn trọng dùng UFW với Docker</title><link href="https://thanhdancer.com/technical/2025/01/13/can-trong-dung-ufw-voi-docker.html" rel="alternate" type="text/html" title="Cẩn trọng dùng UFW với Docker" /><published>2025-01-13T00:00:00+00:00</published><updated>2025-01-13T00:00:00+00:00</updated><id>https://thanhdancer.com/technical/2025/01/13/can-trong-dung-ufw-voi-docker</id><content type="html" xml:base="https://thanhdancer.com/technical/2025/01/13/can-trong-dung-ufw-voi-docker.html"><![CDATA[<h2 id="tldr">TLDR;</h2>
<ul>
  <li>UFW không chặn được các gói tin từ bên trong mạng nội bộ khi mapping port với Docker container (thường dùng trong tham số của docker run <code class="language-plaintext highlighter-rouge">-p {internal-ip}:{expose-port}:{container-port}</code>).</li>
  <li>Phương án 1: Sử dụng firewall từ Cloud Provider.</li>
  <li>Phương án 2: Sử dụng <a href="https://linux.die.net/man/8/iptables"><code class="language-plaintext highlighter-rouge">iptables</code></a> để chặn các gói tin từ bên trong mạng nội bộ.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Block all traffics </span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> <span class="o">{</span>network_interface<span class="o">}</span> <span class="nt">-j</span> DROP

<span class="c"># Keep connection states ESTABLISHED, RELATED</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT

<span class="c"># Each allowing rule will be added</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> <span class="o">{</span>network_interface<span class="o">}</span> <span class="nt">-m</span> conntrack <span class="nt">-p</span> tcp <span class="nt">--ctstate</span> NEW <span class="nt">--ctorigsrc</span> <span class="o">{</span>source_ip<span class="o">}</span> <span class="nt">--ctorigdstport</span> <span class="o">{</span>destination_port<span class="o">}</span> <span class="nt">-j</span> ACCEPT
</code></pre></div></div>

<h2 id="kịch-bản">Kịch bản</h2>
<p><a href="/images/2025/01/13/scenario1.png"><img src="/images/2025/01/13/scenario1.png" alt="Hạ tầng" /></a></p>
<h3 id="hạ-tầng">Hạ tầng</h3>

<table>
  <thead>
    <tr>
      <th>Máy chủ</th>
      <th>Network Interface</th>
      <th>IP Address</th>
      <th>Mô tả</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>eth0</td>
      <td>x.x.x.1</td>
      <td>Cổng mạng ngoại bộ</td>
    </tr>
    <tr>
      <td>A</td>
      <td>eth1</td>
      <td>10.0.0.1</td>
      <td>Cổng mạng nội bộ</td>
    </tr>
    <tr>
      <td>B</td>
      <td>eth0</td>
      <td>x.x.x.2</td>
      <td>Cổng mạng ngoại bộ</td>
    </tr>
    <tr>
      <td>B</td>
      <td>eth1</td>
      <td>10.0.0.2</td>
      <td>Cổng mạng nội bộ</td>
    </tr>
    <tr>
      <td>C</td>
      <td>eth1</td>
      <td>10.0.0.3</td>
      <td>Cổng mạng nội bộ</td>
    </tr>
  </tbody>
</table>

<h3 id="dịch-vụ">Dịch vụ</h3>
<p>Các dịch vụ đang chạy trong docker container, các cổng (port) được mapping như bảng sau.</p>

<table>
  <thead>
    <tr>
      <th>Máy chủ</th>
      <th>Dịch vụ</th>
      <th>Bind IP</th>
      <th>Port</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>Web Server</td>
      <td>0.0.0.0</td>
      <td>80</td>
    </tr>
    <tr>
      <td>B</td>
      <td>MySQL 1</td>
      <td>10.0.0.2</td>
      <td>3306</td>
    </tr>
    <tr>
      <td>B</td>
      <td>MySQL 2</td>
      <td>10.0.0.2</td>
      <td>3307</td>
    </tr>
  </tbody>
</table>

<h3 id="mục-tiêu">Mục tiêu</h3>
<ul>
  <li>Chặn toàn bộ các gói tin từ Internet vào máy chủ B.</li>
  <li>Chặn toàn bộ các gói tin từ bên trong mạng nội bộ vào máy chủ B.</li>
  <li>Mở cho duy nhất máy chủ C được phép truy cập vào máy chủ B qua cổng 3307</li>
  <li>Mở cho duy nhất máy chủ A được phép truy cập vào máy chủ B qua cổng 3306</li>
</ul>

<h3 id="thực-thi">Thực thi</h3>
<p><ins><strong><em>Lưu ý:</em></strong> Kịch bản này chứa lỗi, không sử dụng trong môi trường thực tế.</ins></p>
<ul>
  <li>Bind dịch vụ MySQL 1 và MySQL 2 trên máy chủ B với cổng 3306 và 3307 trên cổng mạng nội bộ.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Môi trường: Máy chủ B</span>
docker run <span class="nt">--name</span> mysql-1 <span class="nt">-d</span> <span class="nt">-p</span> 10.0.0.2:3306:3306 mysql:5.7 
docker run <span class="nt">--name</span> mysql-2 <span class="nt">-d</span> <span class="nt">-p</span> 10.0.0.2:3307:3306 mysql:5.7
</code></pre></div></div>
<ul>
  <li>Dùng <code class="language-plaintext highlighter-rouge">ufw</code> làm firewall trên máy chủ B.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Môi trường: Máy chủ B</span>

<span class="c"># Chặn toàn kết nối vào</span>
ufw default deny incoming

<span class="c"># Mở cổng 3306 cho máy chủ A</span>
ufw allow from 10.0.0.1/32 to any port 3306

<span class="c"># Mở cổng 3307 cho máy chủ C</span>
ufw allow from 10.0.0.3/32 to any port 3307
</code></pre></div></div>

<h2 id="vấn-đề">Vấn đề</h2>
<ul>
  <li>UFW không chặn được các gói tin <sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> khi mapping port với Docker container (thường dùng trong tham số của docker run <code class="language-plaintext highlighter-rouge">-p {internal-ip}:{expose-port}:{container-port}</code>).</li>
  <li>Một số bài viết <sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup> tìm cách chèn thêm các rules vào chain <code class="language-plaintext highlighter-rouge">DOCKER-USER</code> của iptables nhưng chỉ hiệu quả để chặn các gói tin đến từ bên ngoài, không chặn được các gói tin từ bên trong mạng nội bộ như kịch bản đề ra.</li>
</ul>

<h2 id="phương-án">Phương án</h2>
<h3 id="1-sử-dụng-firewall-từ-cloud-provider">1. Sử dụng firewall từ Cloud Provider</h3>
<ul>
  <li>Đối với các dịch vụ cloud chuyên nghiệp như AWS, GCP, Azure, các máy chủ sẽ được quản lý bởi firewall của cloud provider. Với sự hỗ trợ của hệ thống mạng ảo VPC, họ tích hợp firewall tầng mạng thay vì sử dụng các firewall tầng phần mềm <sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup> <sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup> <sup id="fnref:5"><a href="#fn:5" class="footnote" rel="footnote" role="doc-noteref">5</a></sup>. Vì vậy, việc chặn sẽ hiệu quả và không ảnh hưởng vì các phần mềm xung đột với nhau.</li>
</ul>

<h3 id="2-sử-dụng-iptables-trên-từng-máy-chủ">2. Sử dụng iptables trên từng máy chủ</h3>
<ul>
  <li>Dùng chain <code class="language-plaintext highlighter-rouge">DOCKER-USER</code> để quản lý các rule của Docker thay vì các chain mặc định. Mục đích của việc này là để tách biệt các rule định nghĩa cho Docker với các rule khác <sup id="fnref:1:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>.</li>
  <li>Các rules viết phải sử dụng extension <code class="language-plaintext highlighter-rouge">conntrack</code><sup id="fnref:6"><a href="#fn:6" class="footnote" rel="footnote" role="doc-noteref">6</a></sup>  vì sau khi gói tin vào <code class="language-plaintext highlighter-rouge">DOCKER-USER</code> đã qua bộ lọc DNAT <sup id="fnref:1:2"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, địa chỉ và cổng đã có thể bị thay đổi.</li>
  <li>Lệnh thêm rules vào chain <code class="language-plaintext highlighter-rouge">DOCKER-USER</code> trên máy chủ B:</li>
</ul>

<p><ins><strong><em>Lưu ý:</em></strong> iptables có thể làm mất kết nối điều khiển nếu bạn cấu hình sai. Hãy chắc chắn có phương án truy cập thay thế trong trường hợp mất kết nối.</ins></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Môi trường: Máy chủ B</span>
<span class="c"># Chặn toàn bộ gói tin từ Internet </span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth0 <span class="nt">-j</span> DROP
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth0 <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"Dropped packet: "</span> <span class="nt">--log-level</span> 4

<span class="c"># Chặn toàn bộ gói tin nội bộ</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-j</span> DROP
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-j</span> LOG <span class="nt">--log-prefix</span> <span class="s2">"Dropped packet: "</span> <span class="nt">--log-level</span> 4

<span class="c"># Giữ các kết nối ở trạng thái ESTABLISHED, RELATED</span>
<span class="c"># Rule này sẽ giúp bạn giải quyết tình trạng kết nối ra ngoài đã thiết lập nhưng lại bị chặn.</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-m</span> conntrack <span class="nt">--ctstate</span> ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT

<span class="c"># Mở cho duy nhất máy chủ A truy cập cổng 3306 qua mạng nội bộ</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-m</span> conntrack <span class="nt">-p</span> tcp <span class="nt">--ctstate</span> NEW <span class="nt">--ctorigsrc</span> 10.0.0.1 <span class="nt">--ctorigdstport</span> 3306 <span class="nt">-j</span> ACCEPT

<span class="c"># Mở cho duy nhất máy chủ C truy cập cổng 3307 qua mạng nội bộ</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> DOCKER-USER <span class="nt">-i</span> eth1 <span class="nt">-m</span> conntrack <span class="nt">-p</span> tcp <span class="nt">--ctstate</span> NEW <span class="nt">--ctorigsrc</span> 10.0.0.3 <span class="nt">--ctorigdstport</span> 3307 <span class="nt">-j</span> ACCEPT
</code></pre></div></div>

<!-- ## Tham chiếu -->

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://docs.docker.com/engine/network/packet-filtering-firewalls/#port-publishing-and-mapping">Packet filtering and firewalls</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:1:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://github.com/chaifeng/ufw-docker">To Fix The Docker and UFW Security Flaw Without Disabling Iptables</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/what-is-aws-network-firewall.html">AWS Network Firewall</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="https://cloud.google.com/firewall/docs/configure-global-fw-policies">Google Cloud NGFW</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="https://learn.microsoft.com/en-us/azure/firewall/overview">Azure Firewall</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p><a href="https://ipset.netfilter.org/iptables-extensions.man.html#lbAO">iptable conntrack extension</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="technical" /><category term="docker" /><category term="security" /><category term="network" /><category term="firewall" /><category term="iptables" /><category term="ufw" /><summary type="html"><![CDATA[TLDR; UFW không chặn được các gói tin từ bên trong mạng nội bộ khi mapping port với Docker container (thường dùng trong tham số của docker run -p {internal-ip}:{expose-port}:{container-port}). Phương án 1: Sử dụng firewall từ Cloud Provider. Phương án 2: Sử dụng iptables để chặn các gói tin từ bên trong mạng nội bộ.]]></summary></entry><entry><title type="html">Lọc trùng dữ liệu</title><link href="https://thanhdancer.com/technical/2015/03/02/loc-trung-du-lieu.html" rel="alternate" type="text/html" title="Lọc trùng dữ liệu" /><published>2015-03-02T00:00:00+00:00</published><updated>2015-03-02T00:00:00+00:00</updated><id>https://thanhdancer.com/technical/2015/03/02/loc-trung-du-lieu</id><content type="html" xml:base="https://thanhdancer.com/technical/2015/03/02/loc-trung-du-lieu.html"><![CDATA[<h2 id="ý-chính">Ý chính</h2>
<ul>
  <li>Sử dụng Bash với công cụ <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">parallel</code>, <code class="language-plaintext highlighter-rouge">sed</code>, <code class="language-plaintext highlighter-rouge">sort</code> cho kết quả tối ưu nhất.</li>
</ul>

<h2 id="giới-thiệu">Giới thiệu</h2>
<p>Khi làm việc với dữ liệu thô, theo trạng thái từng từ, mỗi từ một dòng (thường dùng trong làm từ điển), dữ liệu thường bị thừa ra. Nguyên nhân là do dữ liệu trùng nhau, các kí tự thừa (\r, \n, space) ở đầu và cuối các từ làm bộ lọc nhầm lẫn cho rằng đây là các từ khác nhau. Vậy nên bài toán đặt ra trong quá trình làm sạch dữ liệu là xóa các kí tự thừa ở đầu và cuối của từ, sắp xếp và lọc các từ trùng nhau.</p>

<p>Trong làm việc với dữ liệu ít, công việc đó đơn giản, thậm chí làm việc với các phần mềm bảng tính như Excel cũng có thể giải quyết vấn đề. Tuy nhiên, với dữ liệu bắt đầu từ 100 Mb đến hàng GB, TB thì ta phải có một số thủ thuật. Trong bài viết này mình sẽ chia sẻ kinh nghiệm vài lần xử lý và số liệu benchmark.</p>

<h2 id="thử-nghiệm-lọc-trùng-lần-thứ-nhất">Thử nghiệm lọc trùng lần thứ nhất</h2>
<h3 id="điều-kiện">Điều kiện</h3>
<p>Máy tính cá nhân với cấu hình:</p>
<ul>
  <li>OS: Ubuntu 14.04</li>
  <li>RAM: 4GB</li>
  <li>CPU: Intel® Core™ i5-2430M CPU @ 2.40GHz × 4</li>
</ul>

<p>Dữ liệu được phân bổ:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">1k.txt</code>: 1,000 dòng đầu tiên của tệp dữ liệu.</li>
  <li><code class="language-plaintext highlighter-rouge">100k.txt</code>: 100,000 dòng đầu tiên của tệp dữ liệu gốc.</li>
  <li><code class="language-plaintext highlighter-rouge">6tr.txt</code>: Tệp dữ liệu gốc chứa khoảng 6 triệu dòng.</li>
</ul>

<h3 id="phương-thức-thực-hiện">Phương thức thực hiện</h3>
<p>Mình sẽ sử dụng 3 ngôn ngữ để tiện so sánh: Bash, R, và Python.<br />
Theo những cách trước đây, sẽ sử dụng ngôn ngữ Bash và hàm có sẵn của hệ điều hành linux là <code class="language-plaintext highlighter-rouge">sort</code> và <code class="language-plaintext highlighter-rouge">uniq</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> &lt;input-file&gt; | <span class="nb">sort</span> | <span class="nb">uniq</span> &lt;output-file&gt;
</code></pre></div></div>
<p>Sau khi lọc trùng sẽ thu được output đã sắp xếp. Vì lệnh <code class="language-plaintext highlighter-rouge">uniq</code> chỉ được thực hiện sau khi đã sắp xếp input nên bắt buộc phải sort trước khi lọc trùng.</p>

<p>Sau một thời gian tiếp cận, mình biết thêm <a href="https://www.r-project.org">ngôn ngữ R</a> được đánh giá rất tốt dùng cho Thống kê. Vậy nên mình đã cài đặt và thử nghiệm trong công việc lọc trùng. Đối với R, sau khi nhập dữ liệu, ta không cần phải sắp xếp.</p>

<p>Cuối cùng với ngôn ngữ Python, dùng thư viện <a href="https://docs.python.org/3/library/collections.html#counter-objects"><code class="language-plaintext highlighter-rouge">collections.Counter</code></a> để đưa dữ liệu vào bộ đếm. Sau đó ghi ra file.</p>

<h3 id="kết-quả">Kết quả</h3>

<table>
  <thead>
    <tr>
      <th>Ngôn ngữ</th>
      <th>Có sắp xếp</th>
      <th>Đầu vào</th>
      <th>Thời gian</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bash</td>
      <td>Có</td>
      <td>1k.txt</td>
      <td><strong>0s</strong></td>
    </tr>
    <tr>
      <td>Bash</td>
      <td>Có</td>
      <td>100k.txt</td>
      <td>1s</td>
    </tr>
    <tr>
      <td>Bash</td>
      <td>Có</td>
      <td>6tr.txt</td>
      <td>48s</td>
    </tr>
    <tr>
      <td>R</td>
      <td>Không</td>
      <td>1k.txt</td>
      <td>0.01s</td>
    </tr>
    <tr>
      <td>R</td>
      <td>Không</td>
      <td>100k.txt</td>
      <td><strong>0.657s</strong></td>
    </tr>
    <tr>
      <td>R</td>
      <td>Không</td>
      <td>6tr.txt</td>
      <td>71.624s</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>Không</td>
      <td>1k.txt</td>
      <td>0.001s</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>Không</td>
      <td>100k.txt</td>
      <td>0.075s</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>Không</td>
      <td>6tr.txt</td>
      <td><strong>5.926s</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="nhận-xét">Nhận xét</h3>

<p>Như vậy, dùng Bash xử lý file 72MB sẽ phải mất thời gian khoảng 48s để thực hiện, đối với R thì mất 71s (trong đó 28s để đọc dữ liệu). Riêng đối với Python chỉ mất khoảng 6s cho tất cả các công đoạn.</p>

<p>Tuy nhiên với đầu ra của dữ liệu thì chênh lệch nhau khá lớn giữa các ngôn ngữ. Sau khi kiểm tra các file đầu ra của bộ input 100k, không tìm thấy sự khác nhau của output giữa các ngôn ngữ. Tuy nhiên lại có một phát hiện khác khi sử dụng lệnh cat -v đối với file 1k-python.out, cuối mỗi dòng xuất hiện ký tự <code class="language-plaintext highlighter-rouge">^M</code> (<code class="language-plaintext highlighter-rouge">\r</code> trong Windows).</p>

<p>Hơn nữa, sau khi xem kĩ các file output, nhận thấy các kí tự thừa khoảng trống đằng sau nhưng vẫn không bị lọc.</p>

<p><img src="/images/2015/03/02/extra-spaces-1.png" alt="Kí tự thừa" /></p>

<p><img src="/images/2015/03/02/extra-spaces-2.png" alt="Kí tự thừa" /></p>

<h3 id="rút-kinh-nghiệm">Rút kinh nghiệm</h3>
<ul>
  <li>Với khả năng tối ưu nhất, mình sẽ sử dụng Python để thực hiện các lần thử nghiệm tiếp theo.</li>
  <li>Tiền xử lý dữ liệu (pre-process) bằng cách xoá hết các khoảng trống trước và sau của mỗi dòng.</li>
  <li>Sử dụng đa luồng (multi-thread) để tăng tốc độ xử lý của CPU.</li>
</ul>

<h2 id="thử-nghiệm-lần-hai">Thử nghiệm lần hai</h2>
<h3 id="điều-kiện-1">Điều kiện</h3>
<ul>
  <li>Tương tự như <a href="#điều-kiện">điều kiện của lần 1</a>.</li>
  <li>Thêm file <code class="language-plaintext highlighter-rouge">full.txt</code> chứa toàn bộ dữ liệu cần xử lý (khoảng 500 MB).</li>
</ul>

<h3 id="phương-thức-thực-hiện-1">Phương thức thực hiện</h3>
<p>Trước hết, xoá hết các ký tự khoảng trống, <code class="language-plaintext highlighter-rouge">\n</code>, <code class="language-plaintext highlighter-rouge">\r</code> ở trước và sau mỗi dòng.<br />
Sử dụng hàm <code class="language-plaintext highlighter-rouge">map(str.strip, data)</code> của Python sau khi đọc file để thực hiện tác vụ trên. Các bước thử nghiệm tương tự lần trước.</p>

<h3 id="kết-quả-1">Kết quả</h3>

<table>
  <thead>
    <tr>
      <th>File</th>
      <th>Đọc</th>
      <th>Xử lý</th>
      <th>Ghi</th>
      <th>Tổng</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1k.txt</td>
      <td>0.000s</td>
      <td>0.000s</td>
      <td>0.000s</td>
      <td><strong>0.001s</strong></td>
    </tr>
    <tr>
      <td>100k.txt</td>
      <td>0.004s</td>
      <td>0.052s</td>
      <td>0.047s</td>
      <td><strong>0.103s</strong></td>
    </tr>
    <tr>
      <td>6tr.txt</td>
      <td>0.261s</td>
      <td>3.740s</td>
      <td>2.594s</td>
      <td><strong>6.595s</strong></td>
    </tr>
    <tr>
      <td>full.txt</td>
      <td>1m 6s</td>
      <td>9m 18s</td>
      <td>34m 19s</td>
      <td><strong>44m 44s</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="nhận-xét-1">Nhận xét</h3>
<ul>
  <li>Với 2 file <code class="language-plaintext highlighter-rouge">1k.txt</code> và <code class="language-plaintext highlighter-rouge">100k.txt</code>,  khi chưa có sự trùng lặp nhiều về các từ chứa kí tự trống 2 đầu, dung lượng file tương đồng với cách sử dụng Bash. Có thể kết luận mỗi dòng chứa thêm kí tự <code class="language-plaintext highlighter-rouge">^M</code> đã làm dung lượng file tăng lên đáng kể.</li>
  <li>Đối với output của tập đầu vào <code class="language-plaintext highlighter-rouge">6tr.txt</code>, dung lượng đã giảm so với tập Bash ban đầu khoảng 30 KB.</li>
  <li>Khi xử lý với bộ dữ liệu nặng hơn, RAM bị quá tải. Khi đọc file, mặc dù số lượng biến ít, nhưng giá trị của biến sẽ phải nạp tương ứng với kích thước file đọc vào (trong trường hợp <code class="language-plaintext highlighter-rouge">full.txt</code> là 499 MB). Nếu như chạy toàn bộ sẽ hết dung lượng RAM và thời gian chạy sẽ rất lâu do phải đợi bộ nhớ giải phóng. Các lệnh chạy này xử lý trên RAM, không ảnh hưởng tới CPU nên việc multi-thread không cấp bách bằng việc chia nhỏ file để load. Dung lượng RAM còn lại (khi chạy song song các chương trình khác) cũng rất quan trọng. Đối với bộ dữ liệu <code class="language-plaintext highlighter-rouge">6tr.txt</code>, khi chạy cùng Google Chrome xảy ra tình trạng xử lý lâu, mất tới 60s thay vì 6s như trong trường hợp chạy chỉ cùng các trình editor đơn thuần.</li>
</ul>

<p><img src="/images/2015/03/02/ram-usage.jpg" alt="RAM" /></p>

<h3 id="rút-kinh-nghiệm-1">Rút kinh nghiệm</h3>
<ul>
  <li>Cắt nhỏ file ra thành từng phần nhỏ để xử lý.</li>
</ul>

<h2 id="thử-nghiệm-lần-ba">Thử nghiệm lần ba</h2>
<h3 id="điều-kiện-2">Điều kiện</h3>
<ul>
  <li>Cấu hình và dữ liệu <a href="#điều-kiện">tương tự lần 1</a>.</li>
</ul>

<h3 id="phương-thức-thực-hiện-2">Phương thức thực hiện</h3>
<p>Mình chưa tìm ra cách tối ưu khi load file và xử lý trên Python, vì vậy sẽ thử nghiệm với Bash để tìm cách cải tiến.</p>

<p>Trước đây, dòng lệnh để xử lý dữ liệu là <code class="language-plaintext highlighter-rouge">cat &lt;input-file&gt; | sort | uniq &lt;output-file&gt;</code>. Khi sử dụng lênh trên phát sinh một số vấn đề:</p>
<ul>
  <li>Dùng 3 hàm liền nhau, lặp lại công việc bị thừa.</li>
  <li>Chưa xử lý được vấn đề có các ký tự thừa ở đầu và cuối dòng.</li>
  <li>Chạy đơn luồng, không tận dụng được CPU.</li>
</ul>

<p>Mình đã khắc phục như sau:</p>
<ul>
  <li>Dùng <code class="language-plaintext highlighter-rouge">sed</code> để xoá các ký tự không mong muốn.</li>
  <li>Dùng <code class="language-plaintext highlighter-rouge">sort</code> với tham số -us (<code class="language-plaintext highlighter-rouge">-u: unique, -s: stable</code>). Khi sử dụng hai tham số này, ta đã có thể tối ưu việc xoá bỏ các dòng trùng nhau, sắp xếp, đọc file và chạy song song.</li>
</ul>

<p><img src="/images/2015/03/02/ram-usage-2.png" alt="RAM" /></p>

<h4 id="bước-1-tiền-xử-lý-xoá-khoảng-trống">Bước 1: Tiền xử lý xoá khoảng trống</h4>

<p>Với hàm <code class="language-plaintext highlighter-rouge">sed</code>, không có tham số tối ưu khi lọc dữ liệu nên chỉ chạy 1 luồng. Ta được kết quả:</p>

<table>
  <thead>
    <tr>
      <th>File</th>
      <th>Thời gian</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6tr.txt</td>
      <td>7s</td>
    </tr>
    <tr>
      <td>full.txt</td>
      <td>1m 29s</td>
    </tr>
  </tbody>
</table>

<p>Để tối ưu hơn, mình sử dụng công cụ <a href="https://www.gnu.org/software/parallel/"><code class="language-plaintext highlighter-rouge">GNU parallel</code></a> để sed data. Câu lệnh tiền xử lý xoá khoảng trắng sẽ trở thành:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> &lt;input&gt; | parallel –pipe <span class="nb">sed</span> ‘-e “s/<span class="se">\r</span>//g” <span class="nt">-e</span> “s/^ <span class="k">*</span>//” <span class="nt">-e</span> “s/ <span class="k">*</span><span class="nv">$/</span>/”’ <span class="o">&gt;</span> &lt;output&gt;
</code></pre></div></div>

<p>Kết quả thu được:</p>

<table>
  <thead>
    <tr>
      <th>File</th>
      <th>Thời gian</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6tr.txt</td>
      <td>6s</td>
    </tr>
    <tr>
      <td>full.txt</td>
      <td>41s</td>
    </tr>
  </tbody>
</table>

<h4 id="bước-2-sắp-xếp-và-lọc-trùng">Bước 2: Sắp xếp và lọc trùng</h4>
<p>Mình sẽ chỉ sử dụng lệnh <code class="language-plaintext highlighter-rouge">sort</code> với tham số -us để sắp xếp và lọc trùng. Câu lệnh sẽ trở thành:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sort</span> <span class="nt">-us</span> <span class="nt">-o</span> &lt;output&gt; &lt;input&gt;
</code></pre></div></div>

<p>Thời gian thực hiện:</p>

<table>
  <thead>
    <tr>
      <th>File</th>
      <th>Thời gian</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6tr.txt</td>
      <td>33s</td>
    </tr>
    <tr>
      <td>full.txt</td>
      <td>3m 41s</td>
    </tr>
  </tbody>
</table>

<h3 id="nhận-xét-2">Nhận xét</h3>
<p>Việc tối ưu đã hoàn thiện hơn nhiều so với lần trước.</p>]]></content><author><name></name></author><category term="technical" /><category term="python" /><category term="data" /><category term="processing" /><summary type="html"><![CDATA[Ý chính Sử dụng Bash với công cụ cat, parallel, sed, sort cho kết quả tối ưu nhất.]]></summary></entry></feed>